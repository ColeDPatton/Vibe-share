{"ast":null,"code":"var _jsxFileName = \"/Users/colepatton/vibin/src/components/App.js\";\nimport React, { Component } from 'react';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\nimport '../style/App.css';\nimport queryString from 'query-string';\nimport $ from 'jquery';\nimport Post from './Post';\nlet fakeServerData = {\n  user: {\n    device_id: '',\n    name: 'Cole'\n  },\n  posts: [{\n    name: 'Bob',\n    text: 'John spelled feeling wrong lol',\n    songId: '0d28khcov6AiegSCpG5TuT',\n    songName: 'Feel Good Inc.',\n    songArtist: 'Gorrilaz',\n    startTime: '122500'\n  }, {\n    name: 'John',\n    text: 'Felling Good!',\n    songId: '0d28khcov6AiegSCpG5TuT',\n    songName: 'Feel Good Inc.',\n    songArtist: 'Gorrilaz',\n    startTime: '100000'\n  }, {\n    name: 'Alex',\n    text: 'I\\'m Alex',\n    songId: '0yBylQ4liLmENeK82vnHOb',\n    songName: 'Dont Ask Cuz I Dont Know',\n    songArtist: 'Jon Bellion',\n    startTime: '100000'\n  }, {\n    name: 'Emily',\n    text: 'HI!',\n    songId: '6ZzYETKetIfNUsZUb23jgG',\n    songName: 'Day 1',\n    songArtist: 'Honne',\n    startTime: '100000'\n  }]\n};\n\nasync function playAt(device_id, token, songId, startTime) {\n  $.ajax({\n    url: \"https://api.spotify.com/v1/me/player/play?device_id=\" + device_id,\n    type: \"PUT\",\n    data: '{\"uris\": [\"' + 'spotify:track:' + songId + '\"], \"position_ms\": ' + startTime + '}',\n    beforeSend: function (xhr) {\n      xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n    },\n    success: function (data) {\n      console.log(data);\n    }\n  });\n}\n\nasync function getDevices(token) {\n  return fetch('https://api.spotify.com/v1/me/player/devices', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'GET'\n  }).then(d => d.json());\n}\n\nasync function pause(token) {\n  return fetch('https://api.spotify.com/v1/me/player/pause', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'PUT'\n  });\n}\n\nasync function getTrack(token, trackId) {\n  const url = 'https://api.spotify.com/v1/tracks/' + trackId;\n  return fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'GET'\n  }).then(d => d.json());\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handlePlayerStatus = async device_id => {\n      this.setState({\n        deviceId: device_id\n      });\n    };\n\n    this.initializePlayer = () => {\n      let parsed = queryString.parse(window.location.search);\n      let accessToken = parsed.access_token;\n      const name = 'cole';\n      this.player = new window.Spotify.Player({\n        getOAuthToken: cb => {\n          cb(accessToken);\n        },\n        name\n      });\n      this.player.addListener('initialization_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('authentication_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('account_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('playback_error', ({\n        message\n      }) => {\n        console.error(message);\n      }); // Playback status updates\n\n      this.player.addListener('player_state_changed', state => {\n        console.log(state);\n      }); // Ready\n\n      this.player.addListener('ready', ({\n        device_id\n      }) => {\n        this.handlePlayerStatus(device_id);\n        console.log('Ready with Device ID', device_id);\n      }); // Not Ready\n\n      this.player.addListener('not_ready', ({\n        device_id\n      }) => {\n        console.log('Device ID has gone offline', device_id);\n      });\n      this.player.connect();\n    };\n\n    this.state = {\n      serverData: {},\n      deviceId: ''\n    };\n  }\n\n  componentDidMount() {\n    window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;\n    this.setState({\n      serverData: fakeServerData\n    });\n  }\n\n  render() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    let allPosts = this.state.serverData.user && this.state.serverData.posts ? this.state.serverData.posts : []; // this.play(accessToken)\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, this.state.serverData.user && this.state.deviceId && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, this.state.serverData.user.name), allPosts.map(currentPost => /*#__PURE__*/React.createElement(Post, {\n      post: currentPost,\n      deviceId: this.state.deviceId,\n      accessToken: accessToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 42\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/colepatton/vibin/src/components/App.js"],"names":["React","Component","profilePicturePlaceholder","queryString","$","Post","fakeServerData","user","device_id","name","posts","text","songId","songName","songArtist","startTime","playAt","token","ajax","url","type","data","beforeSend","xhr","setRequestHeader","success","console","log","getDevices","fetch","headers","method","then","d","json","pause","getTrack","trackId","App","constructor","handlePlayerStatus","setState","deviceId","initializePlayer","parsed","parse","window","location","search","accessToken","access_token","player","Spotify","Player","getOAuthToken","cb","addListener","message","error","state","connect","serverData","componentDidMount","onSpotifyWebPlaybackSDKReady","render","allPosts","map","currentPost"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\nimport '../style/App.css';\nimport queryString from 'query-string';\nimport $ from 'jquery';\nimport Post from './Post';\nlet fakeServerData = {\n  user: {\n    device_id: '',\n    name: 'Cole'\n  },\n  posts:\n    [{\n      name: 'Bob',\n      text: 'John spelled feeling wrong lol',\n      songId: '0d28khcov6AiegSCpG5TuT',\n      songName: 'Feel Good Inc.',\n      songArtist: 'Gorrilaz',\n      startTime: '122500'\n    },\n    {\n      name: 'John',\n      text: 'Felling Good!',\n      songId: '0d28khcov6AiegSCpG5TuT',\n      songName: 'Feel Good Inc.',\n      songArtist: 'Gorrilaz',\n      startTime: '100000'\n    },\n    {\n      name: 'Alex',\n      text: 'I\\'m Alex',\n      songId: '0yBylQ4liLmENeK82vnHOb',\n      songName: 'Dont Ask Cuz I Dont Know',\n      songArtist: 'Jon Bellion',\n      startTime: '100000'\n    },\n    {\n      name: 'Emily',\n      text: 'HI!',\n      songId: '6ZzYETKetIfNUsZUb23jgG',\n      songName: 'Day 1',\n      songArtist: 'Honne',\n      startTime: '100000'\n    }]\n}\n\nasync function playAt(device_id, token, songId, startTime) {\n  $.ajax({\n    url: \"https://api.spotify.com/v1/me/player/play?device_id=\" + device_id,\n    type: \"PUT\",\n    data: '{\"uris\": [\"' + 'spotify:track:' + songId + '\"], \"position_ms\": ' + startTime + '}',\n    beforeSend: function (xhr) { xhr.setRequestHeader('Authorization', 'Bearer ' + token); },\n    success: function (data) {\n      console.log(data);\n    }\n  });\n}\n\nasync function getDevices(token) {\n  return fetch('https://api.spotify.com/v1/me/player/devices', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'GET',\n  }).then(d => d.json());\n}\n\nasync function pause(token) {\n  return fetch('https://api.spotify.com/v1/me/player/pause', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'PUT',\n  });\n}\n\nasync function getTrack(token, trackId) {\n  const url = 'https://api.spotify.com/v1/tracks/' + trackId;\n  return fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'GET',\n  }).then(d => d.json());\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      serverData: {},\n      deviceId: ''\n    };\n  }\n  handlePlayerStatus = async (device_id) => {\n    this.setState({\n      deviceId: device_id,\n    });\n  };\n\n  // play = async (accessToken) => {\n  //   const devices = await getDevices(accessToken);\n  //   if (devices.devices.length > 0) {\n  //     let device_id = devices.devices[0].id;\n  //     await playAt(device_id, accessToken);\n  //   }\n  // }\n\n  initializePlayer = () => {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    const name = 'cole';\n\n    this.player = new window.Spotify.Player({\n      getOAuthToken: cb => {\n        cb(accessToken);\n      },\n      name\n    });\n\n    this.player.addListener('initialization_error', ({ message }) => { console.error(message); });\n    this.player.addListener('authentication_error', ({ message }) => { console.error(message); });\n    this.player.addListener('account_error', ({ message }) => { console.error(message); });\n    this.player.addListener('playback_error', ({ message }) => { console.error(message); });\n\n    // Playback status updates\n    this.player.addListener('player_state_changed', state => { console.log(state); });\n\n    // Ready\n    this.player.addListener('ready', ({ device_id }) => {\n      this.handlePlayerStatus(device_id);\n      console.log('Ready with Device ID', device_id);\n    });\n\n    // Not Ready\n    this.player.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    this.player.connect();\n  };\n\n  componentDidMount() {\n    window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;\n    this.setState({\n      serverData: fakeServerData\n    });\n  }\n  render() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n\n    let allPosts =\n      (this.state.serverData.user && this.state.serverData.posts) ?\n        this.state.serverData.posts : [];\n    // this.play(accessToken)\n\n    return (\n      <div className=\"App\">\n        {\n          (this.state.serverData.user && this.state.deviceId) &&\n          <div>\n            <h1>{this.state.serverData.user.name}</h1>\n            {allPosts.map(currentPost => <Post post={currentPost} deviceId={this.state.deviceId} accessToken={accessToken} />)}\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}