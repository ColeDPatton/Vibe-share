{"ast":null,"code":"var _jsxFileName = \"/Users/colepatton/vibin/src/pages/UserProfile.js\";\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport '../style/App.css';\nimport { loadPosts, loadLikes, loadUserFollowing, followUser, unFollowUser } from '../backendCalls';\nimport { getLoggedInUser, getUser } from '../spotifyCalls';\nimport Post from '../components/Post';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\n\nclass UserProfile extends Component {\n  constructor() {\n    super();\n\n    this.handlePlayerStatus = async device_id => {\n      this.setState({\n        deviceId: device_id\n      });\n    };\n\n    this.initializePlayer = () => {\n      const name = this.state.serverData.user.name + ' vibes';\n      this.player = new window.Spotify.Player({\n        getOAuthToken: cb => {\n          cb(this.state.accessToken);\n        },\n        name\n      });\n      this.player.addListener('initialization_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('authentication_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('account_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('playback_error', ({\n        message\n      }) => {\n        console.error(message);\n      }); // Playback status updates\n\n      this.player.addListener('player_state_changed', state => {\n        console.log(state);\n      }); // Ready\n\n      this.player.addListener('ready', ({\n        device_id\n      }) => {\n        this.handlePlayerStatus(device_id);\n        console.log('Ready with Device ID', device_id);\n      }); // Not Ready\n\n      this.player.addListener('not_ready', ({\n        device_id\n      }) => {\n        console.log('Device ID has gone offline', device_id);\n      });\n      this.player.connect();\n    };\n\n    this.state = {\n      deviceId: '',\n      accessToken: '',\n      profilePageUsername: '',\n      serverData: {},\n      muted: true,\n      followers: [],\n      following: [],\n      loggedInUserFollowingProfileUser: false\n    };\n    this.clickFollowButton = this.clickFollowButton.bind(this);\n    this.followUser = this.followUser.bind(this);\n    this.unfollowUser = this.unfollowUser.bind(this);\n    this.redirectToHomePage = this.redirectToHomePage.bind(this);\n  }\n\n  filterPosts(post, likes) {\n    let likeCount = 0;\n    likes.filter(like => post._id === like.postId);\n\n    if (post.username === profilePageUsernameFromUrl) {\n      likes.forEach(like => {\n        if (post._id === like.postId) {\n          likeCount++;\n        }\n      });\n      post = { ...post,\n        likedByProfilePageUser: false,\n        likeCount: likeCount\n      };\n      postsForProfile.push(post);\n    } else {\n      likes.forEach(like => {\n        if (post._id === like.postId) {\n          likeCount++;\n\n          if (like.username === profilePageUsernameFromUrl) {\n            post = { ...post,\n              likedByProfilePageUser: true,\n              likeCount: likeCount\n            };\n            postsForProfile.push(post);\n          }\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    let parsed = queryString.parse(window.location.search);\n    let profilePageUsernameFromUrl = parsed.username;\n    let profilePageIDFromUrl = parsed.userId;\n    let postsForProfile = [];\n\n    if (parsed.access_token) {\n      let accessToken = parsed.access_token;\n      getUser(accessToken, profilePageIDFromUrl).then(user => {\n        let imgUrl = user.images && user.images.length > 0 ? user.images[0].url : '';\n        this.setState({\n          imgUrl: imgUrl\n        });\n      });\n      loadUserFollowing(profilePageIDFromUrl).then(user => {\n        this.setState({\n          followers: user.followers,\n          following: user.following\n        });\n      });\n      getLoggedInUser(accessToken).then(user => {\n        loadPosts().then(posts => {\n          loadLikes().then(likes => {\n            posts.forEach(post => {\n              let likedByProfilePageUser = false;\n              let likeCount = 0;\n\n              if (post.username === profilePageUsernameFromUrl) {\n                likes.forEach(like => {\n                  if (post._id === like.postId) {\n                    likeCount++;\n                  }\n                });\n                post = { ...post,\n                  likedByProfilePageUser: likedByProfilePageUser,\n                  likeCount: likeCount\n                };\n                postsForProfile.push(post);\n              } else {\n                likes.forEach(like => {\n                  if (post._id === like.postId) {\n                    likeCount++;\n\n                    if (like.username === profilePageUsernameFromUrl) {\n                      post = { ...post,\n                        likedByProfilePageUser: true,\n                        likeCount: likeCount\n                      };\n                      postsForProfile.push(post);\n                    }\n                  }\n                });\n              }\n            });\n            let loggedInUserFollowingProfileUser = this.state.followers && this.state.followers.includes(user.display_name);\n            this.setState({\n              accessToken: accessToken,\n              serverData: {\n                posts: postsForProfile,\n                user: {\n                  name: user.display_name,\n                  id: user.id\n                }\n              },\n              profilePageUsername: profilePageUsernameFromUrl,\n              profilePageId: profilePageIDFromUrl,\n              loggedInUserFollowingProfileUser: loggedInUserFollowingProfileUser\n            });\n          }).then(window.onSpotifyWebPlaybackSDKReady = this.initializePlayer);\n        });\n      });\n    } else {\n      loadUserFollowing(profilePageIDFromUrl).then(user => {\n        console.log(profilePageIDFromUrl);\n        console.log(user);\n        this.setState({\n          followers: user.followers,\n          following: user.following\n        });\n      });\n      loadPosts().then(posts => {\n        loadLikes().then(likes => {\n          posts.filter(post => this.filterPosts(post, likes)); // posts.forEach(post => {\n          //     let likeCount = 0\n          //     if (post.username === profilePageUsernameFromUrl) {\n          //         likes.forEach(like => {\n          //             if (post._id === like.postId) {\n          //                 likeCount++;\n          //             }\n          //         });\n          //         post = {\n          //             ...post,\n          //             likedByProfilePageUser: false,\n          //             likeCount: likeCount\n          //         }\n          //         postsForProfile.push(post);\n          //     } else {\n          //         likes.forEach(like => {\n          //             if (post._id === like.postId) {\n          //                 likeCount++;\n          //                 if (like.username === profilePageUsernameFromUrl) {\n          //                     post = {\n          //                         ...post,\n          //                         likedByProfilePageUser: true,\n          //                         likeCount: likeCount\n          //                     }\n          //                     postsForProfile.push(post);\n          //                 }\n          //             }\n          //         });\n          //     }\n          // });\n\n          this.setState({\n            serverData: {\n              posts: postsForProfile\n            },\n            profilePageUsername: profilePageUsernameFromUrl\n          });\n        });\n      });\n    }\n  }\n\n  unfollowUser() {\n    unFollowUser(this.state.serverData.user.id, this.state.profilePageId);\n    const updatedFollowerList = this.state.followers;\n    const deleteIndex = updatedFollowerList.findIndex(x => x === this.state.serverData.user.id);\n    updatedFollowerList.splice(deleteIndex, 1);\n    this.setState({\n      followers: updatedFollowerList,\n      loggedInUserFollowingProfileUser: false\n    });\n  }\n\n  followUser() {\n    followUser(this.state.serverData.user.name, this.state.serverData.user.id, this.state.profilePageUsername, this.state.profilePageId);\n    const updatedFollowerList = this.state.followers;\n    updatedFollowerList.push({\n      userId: this.state.serverData.user.id,\n      username: this.state.serverData.user.name\n    });\n    this.setState({\n      followers: updatedFollowerList,\n      loggedInUserFollowingProfileUser: true\n    });\n  }\n\n  clickFollowButton() {\n    this.state.followers.includes(this.state.serverData.user.id) ? this.unfollowUser() : this.followUser();\n  }\n\n  redirectToHomePage() {\n    window.location.href = window.location.origin + (this.state.accessToken ? '?access_token=' + this.state.accessToken : '');\n  }\n\n  render() {\n    let allPosts = this.state.serverData.posts ? this.state.serverData.posts : [];\n    let followers = this.state.followers ? this.state.followers : [];\n    let following = this.state.following ? this.state.following : [];\n    let name = this.state.serverData.user ? this.state.serverData.user.name : '';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        'margin': '.5em'\n      },\n      onClick: this.redirectToHomePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }\n    }, \"Vibe Share\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"myButtonWhite\",\n      onClick: this.handleLogInButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 25\n      }\n    }, this.state.accessToken ? 'Log Out' : 'Log In'))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"profilePageContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"profilePageUser\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"profilePageImg\",\n      src: this.state.imgUrl ? this.state.imgUrl : profilePicturePlaceholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"profilePageUsername\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }, this.state.profilePageUsername), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"followContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 25\n      }\n    }, this.state.serverData.user && this.state.serverData.user.name !== this.state.profilePageUsername && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"myButtonBlue\",\n      onClick: this.clickFollowButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 33\n      }\n    }, this.state.loggedInUserFollowingProfileUser ? 'Unfollow' : 'Follow'), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 29\n      }\n    }, \"Followers: \", followers.length), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scrollFollowers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 29\n      }\n    }, followers.map(follower => /*#__PURE__*/React.createElement(FollowerLink, {\n      follow: follower,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 29\n      }\n    }, \"Following: \", following.length), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scrollFollowing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 29\n      }\n    }, following.map(following => /*#__PURE__*/React.createElement(FollowerLink, {\n      follow: following,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 37\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"profilePagePosts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }\n    }, allPosts.map(currentPost => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 29\n      }\n    }, currentPost.likedByProfilePageUser && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"userProfileLikes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 72\n      }\n    }, this.state.profilePageUsername, \" liked:\"), /*#__PURE__*/React.createElement(Post, {\n      post: currentPost,\n      deviceId: this.state.deviceId,\n      accessToken: this.state.accessToken,\n      muted: this.state.muted,\n      username: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\nexport default UserProfile;\n\nclass FollowerLink extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imgUrl: '',\n      name: ''\n    };\n    this.redirectToUserProfile = this.redirectToUserProfile.bind(this);\n  }\n\n  componentDidMount() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = '';\n\n    if (parsed.access_token) {\n      accessToken = parsed.access_token;\n      getUser(accessToken, this.props.follow.userId).then(user => {\n        let imgUrl = user.images ? user.images[0].url : '';\n        this.setState({\n          imgUrl: imgUrl\n        });\n      });\n    }\n  }\n\n  redirectToUserProfile() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = '';\n    if (parsed.access_token) accessToken = parsed.access_token;\n    window.location.href = window.location.origin + '/user/?username=' + this.props.follow.username + '&userId=' + this.props.follow.userId + (accessToken ? '&access_token=' + accessToken : '');\n  }\n\n  render() {\n    let name = this.props.follow.username;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"followerLink\",\n      onClick: this.redirectToUserProfile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.imgUrl ? this.state.imgUrl : profilePicturePlaceholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }\n    }, name));\n  }\n\n}","map":{"version":3,"sources":["/Users/colepatton/vibin/src/pages/UserProfile.js"],"names":["React","Component","queryString","loadPosts","loadLikes","loadUserFollowing","followUser","unFollowUser","getLoggedInUser","getUser","Post","profilePicturePlaceholder","UserProfile","constructor","handlePlayerStatus","device_id","setState","deviceId","initializePlayer","name","state","serverData","user","player","window","Spotify","Player","getOAuthToken","cb","accessToken","addListener","message","console","error","log","connect","profilePageUsername","muted","followers","following","loggedInUserFollowingProfileUser","clickFollowButton","bind","unfollowUser","redirectToHomePage","filterPosts","post","likes","likeCount","filter","like","_id","postId","username","profilePageUsernameFromUrl","forEach","likedByProfilePageUser","postsForProfile","push","componentDidMount","parsed","parse","location","search","profilePageIDFromUrl","userId","access_token","then","imgUrl","images","length","url","posts","includes","display_name","id","profilePageId","onSpotifyWebPlaybackSDKReady","updatedFollowerList","deleteIndex","findIndex","x","splice","href","origin","render","allPosts","handleLogInButton","map","follower","currentPost","FollowerLink","props","redirectToUserProfile","follow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport '../style/App.css';\nimport { loadPosts, loadLikes, loadUserFollowing, followUser, unFollowUser } from '../backendCalls'\nimport { getLoggedInUser, getUser } from '../spotifyCalls';\nimport Post from '../components/Post';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\n\nclass UserProfile extends Component {\n    constructor() {\n        super();\n        this.state = {\n            deviceId: '',\n            accessToken: '',\n            profilePageUsername: '',\n            serverData: {},\n            muted: true,\n            followers: [],\n            following: [],\n            loggedInUserFollowingProfileUser: false\n        };\n        this.clickFollowButton = this.clickFollowButton.bind(this);\n        this.followUser = this.followUser.bind(this);\n        this.unfollowUser = this.unfollowUser.bind(this);\n        this.redirectToHomePage = this.redirectToHomePage.bind(this);\n    }\n    handlePlayerStatus = async (device_id) => {\n        this.setState({\n            deviceId: device_id,\n        });\n    };\n    initializePlayer = () => {\n        const name = this.state.serverData.user.name + ' vibes';\n\n        this.player = new window.Spotify.Player({\n            getOAuthToken: cb => {\n                cb(this.state.accessToken);\n            },\n            name\n        });\n\n        this.player.addListener('initialization_error', ({ message }) => { console.error(message); });\n        this.player.addListener('authentication_error', ({ message }) => { console.error(message); });\n        this.player.addListener('account_error', ({ message }) => { console.error(message); });\n        this.player.addListener('playback_error', ({ message }) => { console.error(message); });\n\n        // Playback status updates\n        this.player.addListener('player_state_changed', state => { console.log(state); });\n\n        // Ready\n        this.player.addListener('ready', ({ device_id }) => {\n            this.handlePlayerStatus(device_id);\n            console.log('Ready with Device ID', device_id);\n        });\n\n        // Not Ready\n        this.player.addListener('not_ready', ({ device_id }) => {\n            console.log('Device ID has gone offline', device_id);\n        });\n\n        this.player.connect();\n    };\n    filterPosts(post, likes) {\n        let likeCount = 0;\n        likes.filter(like => post._id === like.postId);\n        if (post.username === profilePageUsernameFromUrl) {\n            likes.forEach(like => {\n                if (post._id === like.postId) {\n                    likeCount++;\n                }\n            });\n            post = {\n                ...post,\n                likedByProfilePageUser: false,\n                likeCount: likeCount\n            }\n            postsForProfile.push(post);\n        } else {\n            likes.forEach(like => {\n                if (post._id === like.postId) {\n                    likeCount++;\n                    if (like.username === profilePageUsernameFromUrl) {\n                        post = {\n                            ...post,\n                            likedByProfilePageUser: true,\n                            likeCount: likeCount\n                        }\n                        postsForProfile.push(post);\n                    }\n                }\n            });\n        }\n    }\n    componentDidMount() {\n        let parsed = queryString.parse(window.location.search);\n        let profilePageUsernameFromUrl = parsed.username;\n        let profilePageIDFromUrl = parsed.userId;\n        let postsForProfile = [];\n        if (parsed.access_token) {\n            let accessToken = parsed.access_token;\n            getUser(accessToken, profilePageIDFromUrl).then(user => {\n                let imgUrl = user.images && user.images.length > 0 ?\n                    user.images[0].url : '';\n                this.setState({\n                    imgUrl: imgUrl\n                });\n            });\n            loadUserFollowing(profilePageIDFromUrl).then(user => {\n                this.setState({\n                    followers: user.followers,\n                    following: user.following,\n                });\n            });\n\n            getLoggedInUser(accessToken).then(user => {\n                loadPosts().then(posts => {\n                    loadLikes().then(likes => {\n                        posts.forEach(post => {\n                            let likedByProfilePageUser = false;\n                            let likeCount = 0\n                            if (post.username === profilePageUsernameFromUrl) {\n                                likes.forEach(like => {\n                                    if (post._id === like.postId) {\n                                        likeCount++;\n                                    }\n                                });\n                                post = {\n                                    ...post,\n                                    likedByProfilePageUser: likedByProfilePageUser,\n                                    likeCount: likeCount\n                                }\n                                postsForProfile.push(post);\n                            } else {\n                                likes.forEach(like => {\n                                    if (post._id === like.postId) {\n                                        likeCount++;\n                                        if (like.username === profilePageUsernameFromUrl) {\n                                            post = {\n                                                ...post,\n                                                likedByProfilePageUser: true,\n                                                likeCount: likeCount\n                                            }\n                                            postsForProfile.push(post);\n                                        }\n                                    }\n                                });\n                            }\n                        });\n                        let loggedInUserFollowingProfileUser = this.state.followers &&\n                            this.state.followers.includes(user.display_name);\n                        this.setState({\n                            accessToken: accessToken,\n                            serverData: {\n                                posts: postsForProfile,\n                                user: {\n                                    name: user.display_name,\n                                    id: user.id\n                                }\n                            },\n                            profilePageUsername: profilePageUsernameFromUrl,\n                            profilePageId: profilePageIDFromUrl,\n                            loggedInUserFollowingProfileUser: loggedInUserFollowingProfileUser\n                        });\n                    }).then(window.onSpotifyWebPlaybackSDKReady = this.initializePlayer);\n                });\n            });\n        } else {\n            loadUserFollowing(profilePageIDFromUrl).then(user => {\n                console.log(profilePageIDFromUrl);\n                console.log(user);\n                this.setState({\n                    followers: user.followers,\n                    following: user.following,\n                })\n            })\n\n            loadPosts().then(posts => {\n                loadLikes().then(likes => {\n                    posts.filter(post => this.filterPosts(post, likes));\n                    // posts.forEach(post => {\n                    //     let likeCount = 0\n                    //     if (post.username === profilePageUsernameFromUrl) {\n                    //         likes.forEach(like => {\n                    //             if (post._id === like.postId) {\n                    //                 likeCount++;\n                    //             }\n                    //         });\n                    //         post = {\n                    //             ...post,\n                    //             likedByProfilePageUser: false,\n                    //             likeCount: likeCount\n                    //         }\n                    //         postsForProfile.push(post);\n                    //     } else {\n                    //         likes.forEach(like => {\n                    //             if (post._id === like.postId) {\n                    //                 likeCount++;\n                    //                 if (like.username === profilePageUsernameFromUrl) {\n                    //                     post = {\n                    //                         ...post,\n                    //                         likedByProfilePageUser: true,\n                    //                         likeCount: likeCount\n                    //                     }\n                    //                     postsForProfile.push(post);\n                    //                 }\n                    //             }\n                    //         });\n                    //     }\n                    // });\n                    this.setState({\n                        serverData: {\n                            posts: postsForProfile,\n                        },\n                        profilePageUsername: profilePageUsernameFromUrl\n                    });\n                });\n            });\n        }\n    }\n    unfollowUser() {\n        unFollowUser(this.state.serverData.user.id, this.state.profilePageId);\n        const updatedFollowerList = this.state.followers;\n        const deleteIndex = updatedFollowerList.findIndex(x => x === this.state.serverData.user.id);\n        updatedFollowerList.splice(deleteIndex, 1);\n        this.setState({\n            followers: updatedFollowerList,\n            loggedInUserFollowingProfileUser: false\n        });\n    }\n    followUser() {\n        followUser(this.state.serverData.user.name, this.state.serverData.user.id,\n            this.state.profilePageUsername, this.state.profilePageId);\n        const updatedFollowerList = this.state.followers;\n        updatedFollowerList.push({\n            userId: this.state.serverData.user.id,\n            username: this.state.serverData.user.name\n        });\n        this.setState({\n            followers: updatedFollowerList,\n            loggedInUserFollowingProfileUser: true\n        });\n    }\n    clickFollowButton() {\n        this.state.followers.includes(this.state.serverData.user.id) ?\n            this.unfollowUser() : this.followUser();\n    }\n    redirectToHomePage() {\n        window.location.href = window.location.origin + (this.state.accessToken ? ('?access_token=' + this.state.accessToken) : '');\n    }\n    render() {\n        let allPosts = this.state.serverData.posts ? this.state.serverData.posts : [];\n        let followers = this.state.followers ? this.state.followers : [];\n        let following = this.state.following ? this.state.following : [];\n        let name = this.state.serverData.user ? this.state.serverData.user.name : '';\n        return (\n            <div className='App'>\n                <div className='header'>\n                    <h1 style={{ 'margin': '.5em' }} onClick={this.redirectToHomePage}>Vibe Share</h1>\n                    <div className='buttonContainer'>\n                        <button className='myButtonWhite' onClick={this.handleLogInButton}>{this.state.accessToken ? 'Log Out' : 'Log In'}</button>\n                    </div>\n                </div>\n                <div className='profilePageContent'>\n                    <div className='profilePageUser'>\n                        <img className='profilePageImg' src={this.state.imgUrl ? this.state.imgUrl : profilePicturePlaceholder} />\n                        <h2 className='profilePageUsername'>{this.state.profilePageUsername}</h2>\n                        <div className='followContainer'>\n                            {this.state.serverData.user && (this.state.serverData.user.name !== this.state.profilePageUsername) &&\n                                <button className='myButtonBlue' onClick={this.clickFollowButton}>{this.state.loggedInUserFollowingProfileUser ? 'Unfollow' : 'Follow'}</button>\n                            }\n                            <h3>Followers: {followers.length}</h3>\n                            <div className='scrollFollowers'>\n                                {followers.map(follower =>\n                                    <FollowerLink follow={follower} ></FollowerLink>\n                                )}\n                            </div>\n                            <h3>Following: {following.length}</h3>\n                            <div className='scrollFollowing'>\n                                {following.map(following =>\n                                    <FollowerLink follow={following} ></FollowerLink>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                    <div className='profilePagePosts'>\n                        {allPosts.map(currentPost =>\n                            <div className='postContainer'>\n                                {currentPost.likedByProfilePageUser && <p className=\"userProfileLikes\">{this.state.profilePageUsername} liked:</p>}\n                                <Post\n                                    post={currentPost}\n                                    deviceId={this.state.deviceId}\n                                    accessToken={this.state.accessToken}\n                                    muted={this.state.muted}\n                                    username={name}\n                                />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default UserProfile;\n\nclass FollowerLink extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imgUrl: '',\n            name: '',\n        };\n        this.redirectToUserProfile = this.redirectToUserProfile.bind(this);\n    }\n    componentDidMount() {\n        let parsed = queryString.parse(window.location.search);\n        let accessToken = ''\n        if (parsed.access_token) {\n            accessToken = parsed.access_token;\n            getUser(accessToken, this.props.follow.userId).then(user => {\n                let imgUrl = user.images ?\n                    user.images[0].url : '';\n                this.setState({\n                    imgUrl: imgUrl,\n                });\n            });\n        }\n    }\n    redirectToUserProfile() {\n        let parsed = queryString.parse(window.location.search);\n        let accessToken = ''\n        if (parsed.access_token)\n            accessToken = parsed.access_token;\n\n        window.location.href = window.location.origin +\n            '/user/?username=' + this.props.follow.username +\n            '&userId=' + this.props.follow.userId +\n            (accessToken ? ('&access_token=' + accessToken) : '');\n    }\n    render() {\n        let name = this.props.follow.username;\n        return (\n            <div className=\"followerLink\" onClick={this.redirectToUserProfile}>\n                <img src={this.state.imgUrl ? this.state.imgUrl : profilePicturePlaceholder}></img>\n                <h3>{name}</h3>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}