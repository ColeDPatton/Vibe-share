{"ast":null,"code":"var _jsxFileName = \"/Users/colepatton/vibin/src/pages/UserProfile.js\";\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport '../style/App.css';\nimport { loadPosts, loadLikes, loadUserFollowing, newUser } from '../backendCalls';\nimport { getUser } from '../spotifyCalls';\nimport Post from '../components/Post';\n\nclass UserProfile extends Component {\n  constructor() {\n    super();\n\n    this.handlePlayerStatus = async device_id => {\n      this.setState({\n        deviceId: device_id\n      });\n    };\n\n    this.initializePlayer = () => {\n      const name = this.state.serverData.user.name + ' vibes';\n      this.player = new window.Spotify.Player({\n        getOAuthToken: cb => {\n          cb(this.state.accessToken);\n        },\n        name\n      });\n      this.player.addListener('initialization_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('authentication_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('account_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('playback_error', ({\n        message\n      }) => {\n        console.error(message);\n      }); // Playback status updates\n\n      this.player.addListener('player_state_changed', state => {\n        console.log(state);\n      }); // Ready\n\n      this.player.addListener('ready', ({\n        device_id\n      }) => {\n        this.handlePlayerStatus(device_id);\n        console.log('Ready with Device ID', device_id);\n      }); // Not Ready\n\n      this.player.addListener('not_ready', ({\n        device_id\n      }) => {\n        console.log('Device ID has gone offline', device_id);\n      });\n      this.player.connect();\n    };\n\n    this.state = {\n      deviceId: '',\n      accessToken: '',\n      userProfile: '',\n      serverData: {},\n      muted: true\n    };\n    this.getFollowing = this.getFollowing.bind(this);\n    this.newUserButton = this.newUserButton.bind(this);\n  }\n\n  componentDidMount() {\n    let parsed = queryString.parse(window.location.search);\n    let username = parsed.username;\n    let postsForProfile = [];\n\n    if (parsed.access_token) {\n      let accessToken = parsed.access_token;\n      getUser(accessToken).then(user => {\n        loadPosts().then(posts => {\n          loadLikes().then(likes => {\n            posts.forEach(post => {\n              let likeCount = 0;\n\n              if (post.name === username) {\n                likes.forEach(like => {\n                  if (post._id === like.postId) {\n                    likeCount++;\n                  }\n                });\n                post = { ...post,\n                  likeByUser: true,\n                  likeCount: likeCount\n                };\n                postsForProfile.push(post);\n              } else {\n                likes.forEach(like => {\n                  if (post._id === like.postId) {\n                    likeCount++;\n\n                    if (like.username === username) {\n                      console.log(\"liked\");\n                      post = { ...post,\n                        likeByUser: true,\n                        likeCount: likeCount\n                      };\n                      postsForProfile.push(post);\n                    }\n                  }\n                });\n              }\n            });\n            this.setState({\n              accessToken: accessToken,\n              serverData: {\n                posts: postsForProfile,\n                user: {\n                  name: user.display_name\n                }\n              }\n            });\n          }).then(window.onSpotifyWebPlaybackSDKReady = this.initializePlayer);\n        });\n      });\n    } else {\n      loadPosts().then(posts => {\n        loadLikes().then(likes => {\n          posts.forEach(post => {\n            let likeCount = 0;\n\n            if (post.name === username) {\n              likes.forEach(like => {\n                if (post._id === like.postId) {\n                  likeCount++;\n                }\n              });\n              post = { ...post,\n                likeByUser: true,\n                likeCount: likeCount\n              };\n              postsForProfile.push(post);\n            } else {\n              likes.forEach(like => {\n                if (post._id === like.postId) {\n                  likeCount++;\n\n                  if (like.username === username) {\n                    post = { ...post,\n                      likeByUser: true,\n                      likeCount: likeCount\n                    };\n                    postsForProfile.push(post);\n                  }\n                }\n              });\n            }\n          });\n          this.setState({\n            serverData: {\n              posts: postsForProfile\n            }\n          });\n        });\n      });\n    }\n  }\n\n  getFollowing() {\n    loadUserFollowing(this.state.username);\n  }\n\n  newUserButton() {\n    newUser(this.state.username);\n  }\n\n  render() {\n    let allPosts = this.state.serverData.posts ? this.state.serverData.posts : [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    }, \"Vibe Share\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"myButtonWhite\",\n      onClick: this.handleLogInButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, this.state.accessToken ? 'Log Out' : 'Log In'))), /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        marginTop: '5em'\n      },\n      className: \"myButtonWhite\",\n      onClick: this.getFollowing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, \"button\"), /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        marginTop: '5em'\n      },\n      className: \"myButtonWhite\",\n      onClick: this.newUserButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, \"newUser\"), allPosts.map(currentPost => /*#__PURE__*/React.createElement(Post, {\n      post: currentPost,\n      deviceId: this.state.deviceId,\n      accessToken: this.state.accessToken,\n      muted: this.state.muted,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default UserProfile;","map":{"version":3,"sources":["/Users/colepatton/vibin/src/pages/UserProfile.js"],"names":["React","Component","queryString","loadPosts","loadLikes","loadUserFollowing","newUser","getUser","Post","UserProfile","constructor","handlePlayerStatus","device_id","setState","deviceId","initializePlayer","name","state","serverData","user","player","window","Spotify","Player","getOAuthToken","cb","accessToken","addListener","message","console","error","log","connect","userProfile","muted","getFollowing","bind","newUserButton","componentDidMount","parsed","parse","location","search","username","postsForProfile","access_token","then","posts","likes","forEach","post","likeCount","like","_id","postId","likeByUser","push","display_name","onSpotifyWebPlaybackSDKReady","render","allPosts","handleLogInButton","marginTop","map","currentPost"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport '../style/App.css';\nimport { loadPosts, loadLikes, loadUserFollowing, newUser } from '../backendCalls'\nimport { getUser } from '../spotifyCalls';\nimport Post from '../components/Post';\n\nclass UserProfile extends Component {\n    constructor() {\n        super();\n        this.state = {\n            deviceId: '',\n            accessToken: '',\n            userProfile: '',\n            serverData: {},\n            muted: true\n        };\n        this.getFollowing = this.getFollowing.bind(this);\n        this.newUserButton = this.newUserButton.bind(this);\n    }\n    handlePlayerStatus = async (device_id) => {\n        this.setState({\n            deviceId: device_id,\n        });\n    };\n    initializePlayer = () => {\n        const name = this.state.serverData.user.name + ' vibes';\n\n        this.player = new window.Spotify.Player({\n            getOAuthToken: cb => {\n                cb(this.state.accessToken);\n            },\n            name\n        });\n\n        this.player.addListener('initialization_error', ({ message }) => { console.error(message); });\n        this.player.addListener('authentication_error', ({ message }) => { console.error(message); });\n        this.player.addListener('account_error', ({ message }) => { console.error(message); });\n        this.player.addListener('playback_error', ({ message }) => { console.error(message); });\n\n        // Playback status updates\n        this.player.addListener('player_state_changed', state => { console.log(state); });\n\n        // Ready\n        this.player.addListener('ready', ({ device_id }) => {\n            this.handlePlayerStatus(device_id);\n            console.log('Ready with Device ID', device_id);\n        });\n\n        // Not Ready\n        this.player.addListener('not_ready', ({ device_id }) => {\n            console.log('Device ID has gone offline', device_id);\n        });\n\n        this.player.connect();\n    };\n    componentDidMount() {\n        let parsed = queryString.parse(window.location.search);\n        let username = parsed.username;\n        let postsForProfile = [];\n        if (parsed.access_token) {\n            let accessToken = parsed.access_token;\n            getUser(accessToken).then(user => {\n                loadPosts().then(posts => {\n                    loadLikes().then(likes => {\n                        posts.forEach(post => {\n                            let likeCount = 0\n                            if (post.name === username) {\n                                likes.forEach(like => {\n                                    if (post._id === like.postId) {\n                                        likeCount++;\n                                    }\n                                });\n                                post = {\n                                    ...post,\n                                    likeByUser: true,\n                                    likeCount: likeCount\n                                }\n                                postsForProfile.push(post);\n                            } else {\n                                likes.forEach(like => {\n                                    if (post._id === like.postId) {\n                                        likeCount++;\n                                        if (like.username === username) {\n                                            console.log(\"liked\")\n                                            post = {\n                                                ...post,\n                                                likeByUser: true,\n                                                likeCount: likeCount\n                                            }\n                                            postsForProfile.push(post);\n                                        }\n                                    }\n                                });\n                            }\n                        });\n                        this.setState({\n                            accessToken: accessToken,\n                            serverData: {\n                                posts: postsForProfile,\n                                user: {\n                                    name: user.display_name\n                                }\n                            }\n                        });\n                    }).then(window.onSpotifyWebPlaybackSDKReady = this.initializePlayer);\n                });\n            });\n        } else {\n            loadPosts().then(posts => {\n                loadLikes().then(likes => {\n                    posts.forEach(post => {\n                        let likeCount = 0\n                        if (post.name === username) {\n                            likes.forEach(like => {\n                                if (post._id === like.postId) {\n                                    likeCount++;\n                                }\n                            });\n                            post = {\n                                ...post,\n                                likeByUser: true,\n                                likeCount: likeCount\n                            }\n                            postsForProfile.push(post);\n                        } else {\n                            likes.forEach(like => {\n                                if (post._id === like.postId) {\n                                    likeCount++;\n                                    if (like.username === username) {\n                                        post = {\n                                            ...post,\n                                            likeByUser: true,\n                                            likeCount: likeCount\n                                        }\n                                        postsForProfile.push(post);\n                                    }\n                                }\n                            });\n                        }\n                    });\n                    this.setState({\n                        serverData: {\n                            posts: postsForProfile,\n                        }\n                    });\n                });\n            });\n        }\n    }\n    getFollowing() {\n        loadUserFollowing(this.state.username);\n    }\n    newUserButton() {\n        newUser(this.state.username);\n    }\n    render() {\n        let allPosts = this.state.serverData.posts ? this.state.serverData.posts : [];\n\n        return (\n            <div>\n                <div className='header'>\n                    <div>\n                        <h1>Vibe Share</h1>\n                    </div>\n                    <div className='buttonContainer'>\n                        <button className='myButtonWhite' onClick={this.handleLogInButton}>{this.state.accessToken ? 'Log Out' : 'Log In'}</button>\n                    </div>\n                </div>\n                <button style={{ marginTop: '5em' }} className='myButtonWhite' onClick={this.getFollowing}>button</button>\n                <button style={{ marginTop: '5em' }} className='myButtonWhite' onClick={this.newUserButton}>newUser</button>\n                {allPosts.map(currentPost =>\n                    <Post\n                        post={currentPost}\n                        deviceId={this.state.deviceId}\n                        accessToken={this.state.accessToken}\n                        muted={this.state.muted}\n                    />)}\n            </div>\n        )\n    }\n}\n\nexport default UserProfile;\n"]},"metadata":{},"sourceType":"module"}