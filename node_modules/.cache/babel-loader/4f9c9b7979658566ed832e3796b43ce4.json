{"ast":null,"code":"var _jsxFileName = \"/Users/colepatton/vibin/src/components/App.js\";\nimport React, { Component } from 'react';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\nimport '../style/App.css';\nimport queryString from 'query-string';\nimport Post from './Post';\nimport NewPost from './NewPost';\nimport { loadPosts, submitPost } from '../backendCalls';\nimport { getUser } from '../spotifyCalls';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handlePlayerStatus = async device_id => {\n      this.setState({\n        deviceId: device_id\n      });\n    };\n\n    this.initializePlayer = () => {\n      let parsed = queryString.parse(window.location.search);\n      let accessToken = parsed.access_token; // this.setState({\n      //   accessToken: accessToken\n      // });\n\n      const name = 'vibin';\n      this.player = new window.Spotify.Player({\n        getOAuthToken: cb => {\n          cb(accessToken);\n        },\n        name\n      });\n      this.player.addListener('initialization_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('authentication_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('account_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('playback_error', ({\n        message\n      }) => {\n        console.error(message);\n      }); // Playback status updates\n\n      this.player.addListener('player_state_changed', state => {\n        console.log(state);\n      }); // Ready\n\n      this.player.addListener('ready', ({\n        device_id\n      }) => {\n        this.handlePlayerStatus(device_id);\n        console.log('Ready with Device ID', device_id);\n      }); // Not Ready\n\n      this.player.addListener('not_ready', ({\n        device_id\n      }) => {\n        console.log('Device ID has gone offline', device_id);\n      });\n      this.player.connect();\n    };\n\n    this.state = {\n      serverData: {},\n      deviceId: '',\n      accessToken: '',\n      newPost: false\n    };\n    this.clickOuterNewPost = this.clickOuterNewPost.bind(this);\n    this.submitNewPost = this.submitNewPost.bind(this);\n  }\n\n  componentDidMount() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    let username = '';\n    getUser(accessToken).then(user => {\n      username = user.display_name;\n    });\n    window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;\n    loadPosts().then(post => this.setState({\n      accessToken: accessToken,\n      serverData: {\n        posts: post,\n        user: {\n          name: username\n        }\n      }\n    }));\n  }\n\n  async submitNewPost(text, songId, songName, songArtist, startTime, stopTime) {\n    const user = this.state.serverData.user.name;\n    const newPost = await submitPost(user, text, songId, songName, songArtist, startTime, stopTime);\n    const updatedPosts = this.state.serverData.posts;\n    updatedPosts.unshift(newPost);\n    console.log(\"UPDATED POSTS\");\n    console.log(this.state.serverData.posts);\n    this.setState({\n      serverData: {\n        posts: updatedPosts,\n        user: this.state.serverData.user\n      },\n      newPost: false\n    });\n  }\n\n  clickOuterNewPost() {\n    const showPost = this.state.newPost;\n    this.setState({\n      newPost: !showPost\n    });\n  }\n\n  render() {\n    let allPosts = this.state.serverData.user && this.state.serverData.posts ? this.state.serverData.posts : [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, this.state.newPost && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"outerNewPost\",\n      onMouseDown: this.clickOuterNewPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(NewPost, {\n      deviceId: this.state.deviceId,\n      accessToken: this.state.accessToken,\n      onMouseDown: () => {},\n      userName: this.state.serverData.user.name,\n      submitNewPost: this.submitNewPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    })), this.state.serverData.user && this.state.deviceId && /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.newPost ? \"blurPosts\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, this.state.serverData.user.name), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        const showPost = this.state.newPost;\n        this.setState({\n          newPost: !showPost\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, this.state.newPost ? \"Cancel\" : \"New Post\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"posts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, allPosts.map(currentPost => /*#__PURE__*/React.createElement(Post, {\n      post: currentPost,\n      deviceId: this.state.deviceId,\n      accessToken: this.state.accessToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/colepatton/vibin/src/components/App.js"],"names":["React","Component","profilePicturePlaceholder","queryString","Post","NewPost","loadPosts","submitPost","getUser","App","constructor","handlePlayerStatus","device_id","setState","deviceId","initializePlayer","parsed","parse","window","location","search","accessToken","access_token","name","player","Spotify","Player","getOAuthToken","cb","addListener","message","console","error","state","log","connect","serverData","newPost","clickOuterNewPost","bind","submitNewPost","componentDidMount","username","then","user","display_name","onSpotifyWebPlaybackSDKReady","post","posts","text","songId","songName","songArtist","startTime","stopTime","updatedPosts","unshift","showPost","render","allPosts","map","currentPost"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\nimport '../style/App.css';\nimport queryString from 'query-string';\nimport Post from './Post';\nimport NewPost from './NewPost';\nimport { loadPosts, submitPost } from '../backendCalls';\nimport { getUser } from '../spotifyCalls';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      serverData: {},\n      deviceId: '',\n      accessToken: '',\n      newPost: false\n    };\n    this.clickOuterNewPost = this.clickOuterNewPost.bind(this);\n    this.submitNewPost = this.submitNewPost.bind(this);\n  }\n\n  handlePlayerStatus = async (device_id) => {\n    this.setState({\n      deviceId: device_id,\n    });\n  };\n\n  initializePlayer = () => {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    // this.setState({\n    //   accessToken: accessToken\n    // });\n    const name = 'vibin';\n\n    this.player = new window.Spotify.Player({\n      getOAuthToken: cb => {\n        cb(accessToken);\n      },\n      name\n    });\n\n    this.player.addListener('initialization_error', ({ message }) => { console.error(message); });\n    this.player.addListener('authentication_error', ({ message }) => { console.error(message); });\n    this.player.addListener('account_error', ({ message }) => { console.error(message); });\n    this.player.addListener('playback_error', ({ message }) => { console.error(message); });\n\n    // Playback status updates\n    this.player.addListener('player_state_changed', state => { console.log(state); });\n\n    // Ready\n    this.player.addListener('ready', ({ device_id }) => {\n      this.handlePlayerStatus(device_id);\n      console.log('Ready with Device ID', device_id);\n    });\n\n    // Not Ready\n    this.player.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    this.player.connect();\n  };\n\n  componentDidMount() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    let username = '';\n    getUser(accessToken).then(user => {\n      username = user.display_name;\n    });\n\n    window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;\n\n    loadPosts().then(post => this.setState({\n      accessToken: accessToken,\n      serverData: {\n        posts: post,\n        user: {\n          name: username\n        }\n      }\n    }));\n  }\n\n  async submitNewPost(text, songId, songName, songArtist, startTime, stopTime) {\n    const user = this.state.serverData.user.name;\n    const newPost = await submitPost(\n      user,\n      text,\n      songId,\n      songName,\n      songArtist,\n      startTime,\n      stopTime\n    );\n    const updatedPosts = this.state.serverData.posts;\n    updatedPosts.unshift(newPost);\n    console.log(\"UPDATED POSTS\");\n    console.log(this.state.serverData.posts);\n    this.setState({\n      serverData: {\n        posts: updatedPosts,\n        user: this.state.serverData.user\n      },\n      newPost: false\n    });\n\n  }\n\n  clickOuterNewPost() {\n    const showPost = this.state.newPost;\n    this.setState({\n      newPost: !showPost\n    });\n  }\n\n  render() {\n    let allPosts =\n      (this.state.serverData.user && this.state.serverData.posts) ?\n        this.state.serverData.posts : [];\n\n    return (\n      <div className=\"App\">\n        {this.state.newPost &&\n          <div>\n            <div className=\"outerNewPost\" onMouseDown={this.clickOuterNewPost}></div>\n            <NewPost\n              deviceId={this.state.deviceId}\n              accessToken={this.state.accessToken}\n              onMouseDown={() => { }}\n              userName={this.state.serverData.user.name}\n              submitNewPost={this.submitNewPost}\n            />\n          </div>\n        }\n        {\n          (this.state.serverData.user && this.state.deviceId) &&\n          <div className={this.state.newPost ? \"blurPosts\" : \"\"}>\n            <h1>{this.state.serverData.user.name}</h1>\n            <button onClick={() => {\n              const showPost = this.state.newPost;\n              this.setState({\n                newPost: !showPost\n              });\n            }}>{this.state.newPost ? \"Cancel\" : \"New Post\"}</button>\n            <div className=\"posts\">\n              {allPosts.map(currentPost =>\n                <Post\n                  post={currentPost}\n                  deviceId={this.state.deviceId}\n                  accessToken={this.state.accessToken}\n                />)}\n            </div>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}