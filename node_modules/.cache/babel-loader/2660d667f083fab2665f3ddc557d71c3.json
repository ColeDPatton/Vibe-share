{"ast":null,"code":"var _jsxFileName = \"/Users/colepatton/vibin/src/components/App.js\";\nimport React, { Component } from 'react';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\nimport '../style/App.css';\nimport queryString from 'query-string';\nimport $ from 'jquery';\nimport Post from './Post';\nimport NewPost from './NewPost';\nimport { loadPosts } from '../backendCalls';\nimport { getTrack, playAt, pause, search } from '../spotifyCalls';\nlet fakeServerData = {\n  user: {\n    device_id: '',\n    name: 'Cole'\n  },\n  posts: [{\n    name: 'Bob',\n    text: 'John spelled feeling wrong lol',\n    songId: '0d28khcov6AiegSCpG5TuT',\n    songName: 'Feel Good Inc.',\n    songArtist: 'Gorrilaz',\n    startTime: '122500'\n  }, {\n    name: 'John',\n    text: 'Felling Good!',\n    songId: '0d28khcov6AiegSCpG5TuT',\n    songName: 'Feel Good Inc.',\n    songArtist: 'Gorrilaz',\n    startTime: '100000'\n  }, {\n    name: 'Alex',\n    text: 'I\\'m Alex',\n    songId: '0yBylQ4liLmENeK82vnHOb',\n    songName: 'Dont Ask Cuz I Dont Know',\n    songArtist: 'Jon Bellion',\n    startTime: '100000'\n  }, {\n    name: 'Emily',\n    text: 'HI!',\n    songId: '6ZzYETKetIfNUsZUb23jgG',\n    songName: 'Day 1',\n    songArtist: 'Honne',\n    startTime: '100000'\n  }]\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handlePlayerStatus = async device_id => {\n      this.setState({\n        deviceId: device_id\n      });\n    };\n\n    this.initializePlayer = () => {\n      let parsed = queryString.parse(window.location.search);\n      let accessToken = parsed.access_token;\n      const name = 'vibin';\n      this.player = new window.Spotify.Player({\n        getOAuthToken: cb => {\n          cb(accessToken);\n        },\n        name\n      });\n      this.player.addListener('initialization_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('authentication_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('account_error', ({\n        message\n      }) => {\n        console.error(message);\n      });\n      this.player.addListener('playback_error', ({\n        message\n      }) => {\n        console.error(message);\n      }); // Playback status updates\n\n      this.player.addListener('player_state_changed', state => {\n        console.log(state);\n      }); // Ready\n\n      this.player.addListener('ready', ({\n        device_id\n      }) => {\n        this.handlePlayerStatus(device_id);\n        console.log('Ready with Device ID', device_id);\n      }); // Not Ready\n\n      this.player.addListener('not_ready', ({\n        device_id\n      }) => {\n        console.log('Device ID has gone offline', device_id);\n      });\n      this.player.connect();\n    };\n\n    this.wantToPauseSong = async () => {\n      this.setState({\n        wantToPause: true\n      });\n    };\n\n    this.pauseSong = async startTime => {\n      let parsed = queryString.parse(window.location.search);\n      let accessToken = parsed.access_token;\n      await pause(accessToken).then(() => {\n        this.stopTimer(startTime);\n      });\n    };\n\n    this.playSong = async (songId, startTime, endTime) => {\n      let parsed = queryString.parse(window.location.search);\n      let accessToken = parsed.access_token;\n      await playAt(this.state.deviceId, accessToken, songId, startTime).then(() => {\n        clearInterval(this.timer);\n        this.timer = '';\n        this.startTimer(startTime, endTime);\n      });\n    };\n\n    this.state = {\n      serverData: {},\n      deviceId: '',\n      newPost: false,\n      time: 0,\n      start: 0,\n      starting: false,\n      wantToPause: false\n    };\n    this.clickOuterNewPost = this.clickOuterNewPost.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  componentDidMount() {\n    window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;\n    loadPosts().then(post => this.setState({\n      serverData: {\n        posts: post,\n        user: {\n          name: 'Cole'\n        }\n      }\n    }));\n  }\n\n  clickOuterNewPost() {\n    const showPost = this.state.newPost;\n    this.setState({\n      newPost: !showPost\n    });\n  }\n\n  startTimer(startTime, endTime) {\n    console.log(\"START\");\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    this.setState({\n      time: startTime,\n      start: Date.now() - this.state.time\n    });\n\n    if (!this.timer) {\n      this.timer = setInterval(() => {\n        this.setState({\n          time: Math.floor(Date.now() - this.state.start)\n        });\n        console.log(this.state.time);\n\n        if (this.state.time > endTime || this.state.wantToPause) {\n          this.pauseSong(accessToken);\n        }\n      }, 1000);\n    }\n  }\n\n  stopTimer(startTime) {\n    console.log(\"STOP\");\n    this.setState({\n      time: startTime,\n      wantToPause: false\n    });\n    clearInterval(this.timer);\n    this.timer = '';\n  }\n\n  render() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    let allPosts = this.state.serverData.user && this.state.serverData.posts ? this.state.serverData.posts : [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }\n    }, this.state.newPost && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"outerNewPost\",\n      onMouseDown: this.clickOuterNewPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(NewPost, {\n      deviceId: this.state.deviceId,\n      accessToken: accessToken,\n      onMouseDown: () => {},\n      userName: this.state.serverData.user.name,\n      playSong: this.playSong,\n      pauseSong: this.pauseSong,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    })), this.state.serverData.user && this.state.deviceId && /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.newPost ? \"blurPosts\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }, this.state.serverData.user.name), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        const showPost = this.state.newPost;\n        this.setState({\n          newPost: !showPost\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, this.state.newPost ? \"Cancel\" : \"New Post\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"posts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, allPosts.map(currentPost => /*#__PURE__*/React.createElement(Post, {\n      post: currentPost,\n      deviceId: this.state.deviceId,\n      accessToken: accessToken,\n      playSong: this.playSong,\n      pauseSong: this.pauseSong,\n      wantToPauseSong: this.wantToPauseSong,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/colepatton/vibin/src/components/App.js"],"names":["React","Component","profilePicturePlaceholder","queryString","$","Post","NewPost","loadPosts","getTrack","playAt","pause","search","fakeServerData","user","device_id","name","posts","text","songId","songName","songArtist","startTime","App","constructor","handlePlayerStatus","setState","deviceId","initializePlayer","parsed","parse","window","location","accessToken","access_token","player","Spotify","Player","getOAuthToken","cb","addListener","message","console","error","state","log","connect","wantToPauseSong","wantToPause","pauseSong","then","stopTimer","playSong","endTime","clearInterval","timer","startTimer","serverData","newPost","time","start","starting","clickOuterNewPost","bind","componentDidMount","onSpotifyWebPlaybackSDKReady","post","showPost","Date","now","setInterval","Math","floor","render","allPosts","map","currentPost"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,yBAAP,MAAsC,sCAAtC;AACA,OAAO,kBAAP;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,MAAlC,QAAgD,iBAAhD;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE,EADP;AAEJC,IAAAA,IAAI,EAAE;AAFF,GADa;AAKnBC,EAAAA,KAAK,EACH,CAAC;AACCD,IAAAA,IAAI,EAAE,KADP;AAECE,IAAAA,IAAI,EAAE,gCAFP;AAGCC,IAAAA,MAAM,EAAE,wBAHT;AAICC,IAAAA,QAAQ,EAAE,gBAJX;AAKCC,IAAAA,UAAU,EAAE,UALb;AAMCC,IAAAA,SAAS,EAAE;AANZ,GAAD,EAQA;AACEN,IAAAA,IAAI,EAAE,MADR;AAEEE,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,MAAM,EAAE,wBAHV;AAIEC,IAAAA,QAAQ,EAAE,gBAJZ;AAKEC,IAAAA,UAAU,EAAE,UALd;AAMEC,IAAAA,SAAS,EAAE;AANb,GARA,EAgBA;AACEN,IAAAA,IAAI,EAAE,MADR;AAEEE,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,MAAM,EAAE,wBAHV;AAIEC,IAAAA,QAAQ,EAAE,0BAJZ;AAKEC,IAAAA,UAAU,EAAE,aALd;AAMEC,IAAAA,SAAS,EAAE;AANb,GAhBA,EAwBA;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEE,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,MAAM,EAAE,wBAHV;AAIEC,IAAAA,QAAQ,EAAE,OAJZ;AAKEC,IAAAA,UAAU,EAAE,OALd;AAMEC,IAAAA,SAAS,EAAE;AANb,GAxBA;AANiB,CAArB;;AAwCA,MAAMC,GAAN,SAAkBrB,SAAlB,CAA4B;AAC1BsB,EAAAA,WAAW,GAAG;AACZ;;AADY,SAgBdC,kBAhBc,GAgBO,MAAOV,SAAP,IAAqB;AACxC,WAAKW,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAEZ;AADE,OAAd;AAGD,KApBa;;AAAA,SA8Bda,gBA9Bc,GA8BK,MAAM;AACvB,UAAIC,MAAM,GAAGzB,WAAW,CAAC0B,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBpB,MAAlC,CAAb;AACA,UAAIqB,WAAW,GAAGJ,MAAM,CAACK,YAAzB;AACA,YAAMlB,IAAI,GAAG,OAAb;AAEA,WAAKmB,MAAL,GAAc,IAAIJ,MAAM,CAACK,OAAP,CAAeC,MAAnB,CAA0B;AACtCC,QAAAA,aAAa,EAAEC,EAAE,IAAI;AACnBA,UAAAA,EAAE,CAACN,WAAD,CAAF;AACD,SAHqC;AAItCjB,QAAAA;AAJsC,OAA1B,CAAd;AAOA,WAAKmB,MAAL,CAAYK,WAAZ,CAAwB,sBAAxB,EAAgD,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiB;AAAEC,QAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AAAyB,OAA5F;AACA,WAAKN,MAAL,CAAYK,WAAZ,CAAwB,sBAAxB,EAAgD,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiB;AAAEC,QAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AAAyB,OAA5F;AACA,WAAKN,MAAL,CAAYK,WAAZ,CAAwB,eAAxB,EAAyC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiB;AAAEC,QAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AAAyB,OAArF;AACA,WAAKN,MAAL,CAAYK,WAAZ,CAAwB,gBAAxB,EAA0C,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiB;AAAEC,QAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AAAyB,OAAtF,EAfuB,CAiBvB;;AACA,WAAKN,MAAL,CAAYK,WAAZ,CAAwB,sBAAxB,EAAgDI,KAAK,IAAI;AAAEF,QAAAA,OAAO,CAACG,GAAR,CAAYD,KAAZ;AAAqB,OAAhF,EAlBuB,CAoBvB;;AACA,WAAKT,MAAL,CAAYK,WAAZ,CAAwB,OAAxB,EAAiC,CAAC;AAAEzB,QAAAA;AAAF,OAAD,KAAmB;AAClD,aAAKU,kBAAL,CAAwBV,SAAxB;AACA2B,QAAAA,OAAO,CAACG,GAAR,CAAY,sBAAZ,EAAoC9B,SAApC;AACD,OAHD,EArBuB,CA0BvB;;AACA,WAAKoB,MAAL,CAAYK,WAAZ,CAAwB,WAAxB,EAAqC,CAAC;AAAEzB,QAAAA;AAAF,OAAD,KAAmB;AACtD2B,QAAAA,OAAO,CAACG,GAAR,CAAY,4BAAZ,EAA0C9B,SAA1C;AACD,OAFD;AAIA,WAAKoB,MAAL,CAAYW,OAAZ;AACD,KA9Da;;AAAA,SAkFdC,eAlFc,GAkFI,YAAY;AAC5B,WAAKrB,QAAL,CAAc;AACZsB,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAtFa;;AAAA,SAuFdC,SAvFc,GAuFF,MAAO3B,SAAP,IAAqB;AAC/B,UAAIO,MAAM,GAAGzB,WAAW,CAAC0B,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBpB,MAAlC,CAAb;AACA,UAAIqB,WAAW,GAAGJ,MAAM,CAACK,YAAzB;AACA,YAAMvB,KAAK,CAACsB,WAAD,CAAL,CAAmBiB,IAAnB,CAAwB,MAAM;AAClC,aAAKC,SAAL,CAAe7B,SAAf;AACD,OAFK,CAAN;AAGD,KA7Fa;;AAAA,SA8Fd8B,QA9Fc,GA8FH,OAAOjC,MAAP,EAAeG,SAAf,EAA0B+B,OAA1B,KAAsC;AAC/C,UAAIxB,MAAM,GAAGzB,WAAW,CAAC0B,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBpB,MAAlC,CAAb;AACA,UAAIqB,WAAW,GAAGJ,MAAM,CAACK,YAAzB;AACA,YAAMxB,MAAM,CAAC,KAAKkC,KAAL,CAAWjB,QAAZ,EAAsBM,WAAtB,EAAmCd,MAAnC,EAA2CG,SAA3C,CAAN,CAA4D4B,IAA5D,CAAiE,MAAM;AAC3EI,QAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACA,aAAKA,KAAL,GAAa,EAAb;AACA,aAAKC,UAAL,CAAgBlC,SAAhB,EAA2B+B,OAA3B;AACD,OAJK,CAAN;AAKD,KAtGa;;AAEZ,SAAKT,KAAL,GAAa;AACXa,MAAAA,UAAU,EAAE,EADD;AAEX9B,MAAAA,QAAQ,EAAE,EAFC;AAGX+B,MAAAA,OAAO,EAAE,KAHE;AAIXC,MAAAA,IAAI,EAAE,CAJK;AAKXC,MAAAA,KAAK,EAAE,CALI;AAMXC,MAAAA,QAAQ,EAAE,KANC;AAOXb,MAAAA,WAAW,EAAE;AAPF,KAAb;AASA,SAAKc,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKP,UAAL,GAAkB,KAAKA,UAAL,CAAgBO,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKZ,SAAL,GAAiB,KAAKA,SAAL,CAAeY,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAkDDC,EAAAA,iBAAiB,GAAG;AAClBjC,IAAAA,MAAM,CAACkC,4BAAP,GAAsC,KAAKrC,gBAA3C;AACApB,IAAAA,SAAS,GAAG0C,IAAZ,CAAiBgB,IAAI,IAAI,KAAKxC,QAAL,CAAc;AACrC+B,MAAAA,UAAU,EAAE;AACVxC,QAAAA,KAAK,EAAEiD,IADG;AAEVpD,QAAAA,IAAI,EAAE;AACJE,UAAAA,IAAI,EAAE;AADF;AAFI;AADyB,KAAd,CAAzB;AAQD;;AAED8C,EAAAA,iBAAiB,GAAG;AAClB,UAAMK,QAAQ,GAAG,KAAKvB,KAAL,CAAWc,OAA5B;AACA,SAAKhC,QAAL,CAAc;AACZgC,MAAAA,OAAO,EAAE,CAACS;AADE,KAAd;AAGD;;AAsBDX,EAAAA,UAAU,CAAClC,SAAD,EAAY+B,OAAZ,EAAqB;AAC7BX,IAAAA,OAAO,CAACG,GAAR,CAAY,OAAZ;AACA,QAAIhB,MAAM,GAAGzB,WAAW,CAAC0B,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBpB,MAAlC,CAAb;AACA,QAAIqB,WAAW,GAAGJ,MAAM,CAACK,YAAzB;AACA,SAAKR,QAAL,CAAc;AACZiC,MAAAA,IAAI,EAAErC,SADM;AAEZsC,MAAAA,KAAK,EAAEQ,IAAI,CAACC,GAAL,KAAa,KAAKzB,KAAL,CAAWe;AAFnB,KAAd;;AAIA,QAAI,CAAC,KAAKJ,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAae,WAAW,CAAC,MAAM;AAC7B,aAAK5C,QAAL,CAAc;AACZiC,UAAAA,IAAI,EAAEY,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACC,GAAL,KAAa,KAAKzB,KAAL,CAAWgB,KAAnC;AADM,SAAd;AAGAlB,QAAAA,OAAO,CAACG,GAAR,CAAY,KAAKD,KAAL,CAAWe,IAAvB;;AACA,YAAI,KAAKf,KAAL,CAAWe,IAAX,GAAkBN,OAAlB,IAA6B,KAAKT,KAAL,CAAWI,WAA5C,EAAyD;AACvD,eAAKC,SAAL,CAAehB,WAAf;AACD;AACF,OARuB,EAQrB,IARqB,CAAxB;AASD;AACF;;AACDkB,EAAAA,SAAS,CAAC7B,SAAD,EAAY;AACnBoB,IAAAA,OAAO,CAACG,GAAR,CAAY,MAAZ;AACA,SAAKnB,QAAL,CAAc;AACZiC,MAAAA,IAAI,EAAErC,SADM;AAEZ0B,MAAAA,WAAW,EAAE;AAFD,KAAd;AAIAM,IAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACA,SAAKA,KAAL,GAAa,EAAb;AACD;;AACDkB,EAAAA,MAAM,GAAG;AACP,QAAI5C,MAAM,GAAGzB,WAAW,CAAC0B,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBpB,MAAlC,CAAb;AACA,QAAIqB,WAAW,GAAGJ,MAAM,CAACK,YAAzB;AAEA,QAAIwC,QAAQ,GACT,KAAK9B,KAAL,CAAWa,UAAX,CAAsB3C,IAAtB,IAA8B,KAAK8B,KAAL,CAAWa,UAAX,CAAsBxC,KAArD,GACE,KAAK2B,KAAL,CAAWa,UAAX,CAAsBxC,KADxB,GACgC,EAFlC;AAIA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK2B,KAAL,CAAWc,OAAX,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,WAAW,EAAE,KAAKI,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,OAAD;AACE,MAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWjB,QADvB;AAEE,MAAA,WAAW,EAAEM,WAFf;AAGE,MAAA,WAAW,EAAE,MAAM,CAAG,CAHxB;AAIE,MAAA,QAAQ,EAAE,KAAKW,KAAL,CAAWa,UAAX,CAAsB3C,IAAtB,CAA2BE,IAJvC;AAKE,MAAA,QAAQ,EAAE,KAAKoC,QALjB;AAME,MAAA,SAAS,EAAE,KAAKH,SANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFJ,EAeK,KAAKL,KAAL,CAAWa,UAAX,CAAsB3C,IAAtB,IAA8B,KAAK8B,KAAL,CAAWjB,QAA1C,iBACA;AAAK,MAAA,SAAS,EAAE,KAAKiB,KAAL,CAAWc,OAAX,GAAqB,WAArB,GAAmC,EAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKd,KAAL,CAAWa,UAAX,CAAsB3C,IAAtB,CAA2BE,IAAhC,CADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAM;AACrB,cAAMmD,QAAQ,GAAG,KAAKvB,KAAL,CAAWc,OAA5B;AACA,aAAKhC,QAAL,CAAc;AACZgC,UAAAA,OAAO,EAAE,CAACS;AADE,SAAd;AAGD,OALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,KAAKvB,KAAL,CAAWc,OAAX,GAAqB,QAArB,GAAgC,UALpC,CAFF,eAQE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGgB,QAAQ,CAACC,GAAT,CAAaC,WAAW,iBACvB,oBAAC,IAAD;AACE,MAAA,IAAI,EAAEA,WADR;AAEE,MAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWjB,QAFvB;AAGE,MAAA,WAAW,EAAEM,WAHf;AAIE,MAAA,QAAQ,EAAE,KAAKmB,QAJjB;AAKE,MAAA,SAAS,EAAE,KAAKH,SALlB;AAME,MAAA,eAAe,EAAE,KAAKF,eANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CARF,CAhBJ,CADF;AAwCD;;AArLyB;;AAwL5B,eAAexB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport profilePicturePlaceholder from '../img/profilePicturePlaceholder.jpg';\nimport '../style/App.css';\nimport queryString from 'query-string';\nimport $ from 'jquery';\nimport Post from './Post';\nimport NewPost from './NewPost';\nimport { loadPosts } from '../backendCalls';\nimport { getTrack, playAt, pause, search } from '../spotifyCalls';\n\nlet fakeServerData = {\n  user: {\n    device_id: '',\n    name: 'Cole'\n  },\n  posts:\n    [{\n      name: 'Bob',\n      text: 'John spelled feeling wrong lol',\n      songId: '0d28khcov6AiegSCpG5TuT',\n      songName: 'Feel Good Inc.',\n      songArtist: 'Gorrilaz',\n      startTime: '122500'\n    },\n    {\n      name: 'John',\n      text: 'Felling Good!',\n      songId: '0d28khcov6AiegSCpG5TuT',\n      songName: 'Feel Good Inc.',\n      songArtist: 'Gorrilaz',\n      startTime: '100000'\n    },\n    {\n      name: 'Alex',\n      text: 'I\\'m Alex',\n      songId: '0yBylQ4liLmENeK82vnHOb',\n      songName: 'Dont Ask Cuz I Dont Know',\n      songArtist: 'Jon Bellion',\n      startTime: '100000'\n    },\n    {\n      name: 'Emily',\n      text: 'HI!',\n      songId: '6ZzYETKetIfNUsZUb23jgG',\n      songName: 'Day 1',\n      songArtist: 'Honne',\n      startTime: '100000'\n    }]\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      serverData: {},\n      deviceId: '',\n      newPost: false,\n      time: 0,\n      start: 0,\n      starting: false,\n      wantToPause: false\n    };\n    this.clickOuterNewPost = this.clickOuterNewPost.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  handlePlayerStatus = async (device_id) => {\n    this.setState({\n      deviceId: device_id,\n    });\n  };\n\n  // play = async (accessToken) => {\n  //   const devices = await getDevices(accessToken);\n  //   if (devices.devices.length > 0) {\n  //     let device_id = devices.devices[0].id;\n  //     await playAt(device_id, accessToken);\n  //   }\n  // }\n\n  initializePlayer = () => {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    const name = 'vibin';\n\n    this.player = new window.Spotify.Player({\n      getOAuthToken: cb => {\n        cb(accessToken);\n      },\n      name\n    });\n\n    this.player.addListener('initialization_error', ({ message }) => { console.error(message); });\n    this.player.addListener('authentication_error', ({ message }) => { console.error(message); });\n    this.player.addListener('account_error', ({ message }) => { console.error(message); });\n    this.player.addListener('playback_error', ({ message }) => { console.error(message); });\n\n    // Playback status updates\n    this.player.addListener('player_state_changed', state => { console.log(state); });\n\n    // Ready\n    this.player.addListener('ready', ({ device_id }) => {\n      this.handlePlayerStatus(device_id);\n      console.log('Ready with Device ID', device_id);\n    });\n\n    // Not Ready\n    this.player.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    this.player.connect();\n  };\n\n  componentDidMount() {\n    window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;\n    loadPosts().then(post => this.setState({\n      serverData: {\n        posts: post,\n        user: {\n          name: 'Cole'\n        }\n      }\n    }));\n  }\n\n  clickOuterNewPost() {\n    const showPost = this.state.newPost;\n    this.setState({\n      newPost: !showPost\n    });\n  }\n  wantToPauseSong = async () => {\n    this.setState({\n      wantToPause: true\n    })\n  }\n  pauseSong = async (startTime) => {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    await pause(accessToken).then(() => {\n      this.stopTimer(startTime);\n    });\n  }\n  playSong = async (songId, startTime, endTime) => {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    await playAt(this.state.deviceId, accessToken, songId, startTime).then(() => {\n      clearInterval(this.timer);\n      this.timer = '';\n      this.startTimer(startTime, endTime);\n    });\n  }\n  startTimer(startTime, endTime) {\n    console.log(\"START\");\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n    this.setState({\n      time: startTime,\n      start: Date.now() - this.state.time\n    });\n    if (!this.timer) {\n      this.timer = setInterval(() => {\n        this.setState({\n          time: Math.floor(Date.now() - this.state.start),\n        });\n        console.log(this.state.time);\n        if (this.state.time > endTime || this.state.wantToPause) {\n          this.pauseSong(accessToken);\n        }\n      }, 1000);\n    }\n  }\n  stopTimer(startTime) {\n    console.log(\"STOP\");\n    this.setState({\n      time: startTime,\n      wantToPause: false\n    });\n    clearInterval(this.timer);\n    this.timer = '';\n  }\n  render() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n\n    let allPosts =\n      (this.state.serverData.user && this.state.serverData.posts) ?\n        this.state.serverData.posts : [];\n\n    return (\n      <div className=\"App\">\n        {this.state.newPost &&\n          <div>\n            <div className=\"outerNewPost\" onMouseDown={this.clickOuterNewPost}></div>\n            <NewPost\n              deviceId={this.state.deviceId}\n              accessToken={accessToken}\n              onMouseDown={() => { }}\n              userName={this.state.serverData.user.name}\n              playSong={this.playSong}\n              pauseSong={this.pauseSong}\n            />\n          </div>\n        }\n        {\n          (this.state.serverData.user && this.state.deviceId) &&\n          <div className={this.state.newPost ? \"blurPosts\" : \"\"}>\n            <h1>{this.state.serverData.user.name}</h1>\n            <button onClick={() => {\n              const showPost = this.state.newPost;\n              this.setState({\n                newPost: !showPost\n              });\n            }}>{this.state.newPost ? \"Cancel\" : \"New Post\"}</button>\n            <div className=\"posts\">\n              {allPosts.map(currentPost =>\n                <Post\n                  post={currentPost}\n                  deviceId={this.state.deviceId}\n                  accessToken={accessToken}\n                  playSong={this.playSong}\n                  pauseSong={this.pauseSong}\n                  wantToPauseSong={this.wantToPauseSong}\n                />)}\n            </div>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}