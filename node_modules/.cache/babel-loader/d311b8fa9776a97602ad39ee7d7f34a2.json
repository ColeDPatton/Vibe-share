{"ast":null,"code":"import $ from 'jquery';\nexport async function getUser(token) {\n  return fetch('https://api.spotify.com/v1/me', {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(response => response.json());\n}\nexport async function playAt(device_id, token, songId, startTime) {\n  $.ajax({\n    url: \"https://api.spotify.com/v1/me/player/play?device_id=\" + device_id,\n    type: \"PUT\",\n    data: '{\"uris\": [\"' + 'spotify:track:' + songId + '\"], \"position_ms\": ' + startTime + '}',\n    beforeSend: function (xhr) {\n      xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n    },\n    success: function (data) {\n      console.log(data);\n    }\n  });\n}\nexport async function getDevices(token) {\n  return fetch('https://api.spotify.com/v1/me/player/devices', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'GET'\n  }).then(d => d.json());\n}\nexport async function pause(token) {\n  return fetch('https://api.spotify.com/v1/me/player/pause', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'PUT'\n  });\n}\nexport async function getTrack(token, trackId) {\n  console.log('token ' + token);\n  const url = 'https://api.spotify.com/v1/tracks/' + trackId;\n  return fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'GET'\n  }).then(d => d.json());\n}\nexport async function search(token, searchString) {\n  let query = \"q=\" + searchString + \"&type=track&limit=5\";\n  return fetch('https://api.spotify.com/v1/search?' + query, {\n    headers: {\n      Authorization: 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'GET'\n  }).then(d => d.json());\n}\nexport async function getCurrentPlaybackInfo(token) {\n  const url = 'https://api.spotify.com/v1/me/player';\n  return fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    method: 'GET'\n  });\n}","map":{"version":3,"sources":["/Users/colepatton/vibin/src/spotifyCalls.js"],"names":["$","getUser","token","fetch","headers","then","response","json","playAt","device_id","songId","startTime","ajax","url","type","data","beforeSend","xhr","setRequestHeader","success","console","log","getDevices","method","d","pause","getTrack","trackId","search","searchString","query","Authorization","getCurrentPlaybackInfo"],"mappings":"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","sourcesContent":["import $ from 'jquery';\n\nexport async function getUser(token) {\n  return fetch('https://api.spotify.com/v1/me', {\n    headers: {'Authorization': 'Bearer ' + token}\n  }).then(response => response.json());\n}\n\nexport async function playAt(device_id, token, songId, startTime) {\n  $.ajax({\n    url: \"https://api.spotify.com/v1/me/player/play?device_id=\" + device_id,\n    type: \"PUT\",\n    data: '{\"uris\": [\"' + 'spotify:track:' + songId + '\"], \"position_ms\": ' + startTime + '}',\n    beforeSend: function (xhr) { xhr.setRequestHeader('Authorization', 'Bearer ' + token); },\n    success: function (data) {\n      console.log(data);\n    }\n  });\n}\n\nexport async function getDevices(token) {\n  return fetch('https://api.spotify.com/v1/me/player/devices', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'GET',\n  }).then(d => d.json());\n}\n\nexport async function pause(token) {\n  return fetch('https://api.spotify.com/v1/me/player/pause', {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'PUT',\n  });\n}\n\nexport async function getTrack(token, trackId) {\n  console.log('token ' + token);\n  const url = 'https://api.spotify.com/v1/tracks/' + trackId;\n  return fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'GET',\n  }).then(d => d.json());\n}\n\nexport async function search(token, searchString) {\n  let query = \"q=\" + searchString + \"&type=track&limit=5\";\n  return fetch('https://api.spotify.com/v1/search?' + query, {\n    headers: {\n      Authorization: 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'GET',\n  }).then(d => d.json());\n}\n\nexport async function getCurrentPlaybackInfo(token) {\n  const url = 'https://api.spotify.com/v1/me/player';\n  return fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json',\n    },\n    method: 'GET',\n  });\n}"]},"metadata":{},"sourceType":"module"}